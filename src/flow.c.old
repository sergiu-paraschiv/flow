#include <pebble.h>


static Window *main_window;
static Layer *canvas_layer;
static int seconds;

static void set_pixel_color(GBitmapDataRowInfo info, GPoint point, GColor color) {
  memset(&info.data[point.x], color.argb, 1);
}

static void canvas_update_proc(Layer *layer, GContext *ctx) {
  GBitmap *fb = graphics_capture_frame_buffer(ctx);

  int y = 30;
  GBitmapDataRowInfo info = gbitmap_get_data_row_info(fb, y);

  const GColor color = (GColor){ .argb = 0 };
  set_pixel_color(info, GPoint(info.min_x + seconds, y), color);

  graphics_release_frame_buffer(ctx, fb);
}

static void main_window_load(Window *window) {
  Layer *window_layer = window_get_root_layer(window);
  GRect bounds = layer_get_bounds(window_layer);

  canvas_layer = layer_create(bounds);

  layer_set_update_proc(canvas_layer, canvas_update_proc);
  layer_add_child(window_layer, canvas_layer);
}

static void main_window_unload(Window *window) {
  layer_destroy(canvas_layer);
}

static void update_time() {
  time_t ltime;
  struct tm * today;

  ltime = time(NULL);
  today = localtime(&ltime);
  seconds = today->tm_sec;

  layer_mark_dirty(canvas_layer);
}

static void tick_handler(struct tm *tick_time, TimeUnits units_changed) {
  update_time();
}

static void init() {
  main_window = window_create();

  window_set_window_handlers(main_window, (WindowHandlers) {
    .load = main_window_load,
    .unload = main_window_unload
  });

  window_stack_push(main_window, true);

  update_time();
  tick_timer_service_subscribe(SECOND_UNIT, tick_handler);
}

static void deinit() {
  window_destroy(main_window);
}

int main(void) {
  init();
  app_event_loop();
  deinit();
}
